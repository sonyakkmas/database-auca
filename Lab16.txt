postgres=# BEGIN;
UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
COMMIT; -- Both updates are saved permanently
BEGIN
UPDATE 0
UPDATE 0
COMMIT
postgres=# BEGIN;
UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
-- Something went wrong, undo everything
ROLLBACK; -- Both updates are undone
BEGIN
UPDATE 0
UPDATE 0
ROLLBACK
postgres=# BEGIN;

-- Check if account 1 has sufficient balance
SELECT balance FROM accounts WHERE account_id = 1;

-- If sufficient, perform the transfer
UPDATE accounts SET balance = balance - 500 WHERE account_id = 1;
UPDATE accounts SET balance = balance + 500 WHERE account_id = 2;

-- If everything is correct, commit
COMMIT;
BEGIN
 balance 
---------
(0 rows)

UPDATE 0
UPDATE 0
COMMIT
postgres=# BEGIN;
INSERT INTO orders (customer_id, total) VALUES (1, 250.00);
INSERT INTO order_items (order_id, product_id, quantity) VALUES (1, 101, 2);
UPDATE inventory SET stock = stock - 2 WHERE product_id = 101;
-- If any of these fail, ALL are rolled back
COMMIT;
BEGIN
ERROR:  insert or update on table "orders" violates foreign key constraint "orders_customer_id_fkey"
DETAIL:  Key (customer_id)=(1) is not present in table "customers".
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK
postgres=# BEGIN;
INSERT INTO customers (name, email) VALUES ('John Doe', 'john@email.com');
INSERT INTO orders (customer_id, total) VALUES (LASTVAL(), 100.00);
COMMIT;
BEGIN
INSERT 0 1
postgres=# BEGIN TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
SELECT * FROM accounts; -- May see uncommitted changes
COMMIT;
BEGIN
 account_id | balance 
------------+---------
(0 rows)

COMMIT
postgres=# BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
SELECT * FROM accounts WHERE balance > 1000;
-- Another transaction might modify data here
SELECT * FROM accounts WHERE balance > 1000; -- May return different results
COMMIT;
BEGIN
 account_id | balance 
------------+---------
(0 rows)

 account_id | balance 
------------+---------
(0 rows)

COMMIT
postgres=# BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SELECT * FROM accounts WHERE balance > 1000;
-- Even if other transactions modify data, this query will return same results
SELECT * FROM accounts WHERE balance > 1000;
COMMIT;
BEGIN
 account_id | balance 
------------+---------
(0 rows)

 account_id | balance 
------------+---------
(0 rows)

COMMIT
postgres=# BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT * FROM accounts;
UPDATE accounts SET balance = balance * 1.05; -- 5% interest
COMMIT;
BEGIN
 account_id | balance 
------------+---------
(0 rows)

UPDATE 0
COMMIT
postgres=# SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
WARNING:  SET TRANSACTION can only be used in transaction blocks
SET
postgres=# BEGIN;

INSERT INTO customers (name, email) VALUES ('Alice', 'alice@email.com');

SAVEPOINT after_customer_insert;

INSERT INTO orders (customer_id, total) VALUES (1, 500.00);

-- Something went wrong with the order, rollback to savepoint
ROLLBACK TO SAVEPOINT after_customer_insert;

-- Customer insert is still there, but order insert is undone
INSERT INTO orders (customer_id, total) VALUES (1, 300.00);

COMMIT;
BEGIN
INSERT 0 1
SAVEPOINT
ERROR:  insert or update on table "orders" violates foreign key constraint "orders_customer_id_fkey"
DETAIL:  Key (customer_id)=(1) is not present in table "customers".
ROLLBACK
ERROR:  insert or update on table "orders" violates foreign key constraint "orders_customer_id_fkey"
DETAIL:  Key (customer_id)=(1) is not present in table "customers".
ROLLBACK
postgres=# BEGIN;

INSERT INTO products (name, price) VALUES ('Laptop', 999.99);
SAVEPOINT sp1;

INSERT INTO products (name, price) VALUES ('Mouse', 25.99);
SAVEPOINT sp2;

INSERT INTO products (name, price) VALUES ('Invalid Product', -50.00);
-- This violates business rules

ROLLBACK TO SAVEPOINT sp2; -- Removes invalid product insert
-- Laptop and Mouse inserts are still active

INSERT INTO products (name, price) VALUES ('Keyboard', 79.99);

COMMIT;
BEGIN
INSERT 0 1
SAVEPOINT
INSERT 0 1
SAVEPOINT
ERROR:  new row for relation "products" violates check constraint "products_price_check"
DETAIL:  Failing row contains (3, Invalid Product, Invalid Product, -50.00).
ROLLBACK
INSERT 0 1
COMMIT
postgres=# BEGIN;
INSERT INTO logs (message) VALUES ('Starting process');
SAVEPOINT process_start;

-- Do some work
INSERT INTO logs (message) VALUES ('Process completed');
BEGIN
INSERT 0 1
SAVEPOINT
INSERT 0 1
postgres=*# BEGIN;
UPDATE inventory SET stock = stock - 1 WHERE product_id = 101;
INSERT INTO order_items (order_id, product_id, quantity) VALUES (1, 101, 1);
COMMIT;
WARNING:  there is already a transaction in progress
BEGIN
UPDATE 0
ERROR:  insert or update on table "order_items" violates foreign key constraint "order_items_order_id_fkey"
DETAIL:  Key (order_id)=(1) is not present in table "orders".
ROLLBACK
postgres=# BEGIN;

DO $$
DECLARE
  current_balance numeric;
BEGIN
  SELECT balance
    INTO current_balance
  FROM accounts
  WHERE account_id = 1
  FOR UPDATE;

  IF current_balance < 100 THEN
    RAISE EXCEPTION 'Insufficient funds (balance=%)', current_balance
      USING ERRCODE = 'P0001';
  END IF;

  UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
  UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;

EXCEPTION
  WHEN SQLSTATE 'P0001' THEN
    RAISE NOTICE 'Transaction failed: Insufficient funds';
END $$;

COMMIT;
BEGIN
DO
COMMIT
postgres=# BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
-- Critical financial operations here
COMMIT;

-- For reporting, READ COMMITTED is usually sufficient
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
-- Generate reports here
COMMIT;
BEGIN
COMMIT
BEGIN
COMMIT
postgres=# BEGIN;

INSERT INTO customers (customer_id, name, email)
VALUES (1, 'John Doe', 'john@example.com')
ON CONFLICT (customer_id) DO NOTHING;

INSERT INTO products (product_id, name, price) VALUES
  (101, 'Widget', 50.00),
  (102, 'Gadget', 75.00)
ON CONFLICT (product_id) DO UPDATE SET name = EXCLUDED.name, price = EXCLUDED.price;

INSERT INTO orders (customer_id, total) VALUES (1, 1000.00);

SAVEPOINT before_items;

INSERT INTO order_items (order_id, product_id, quantity)
VALUES (currval('orders_id_seq'), 101, 2);

INSERT INTO order_items (order_id, product_id, quantity)
VALUES (currval('orders_id_seq'), 102, 1);

COMMIT;
BEGIN
INSERT 0 1
INSERT 0 2
INSERT 0 1
SAVEPOINT
INSERT 0 1
INSERT 0 1
COMMIT
postgres=# BEGIN;
INSERT INTO audit_log (action, timestamp) VALUES ('user_creation', NOW());
INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');
INSERT INTO user_preferences (user_id, theme) VALUES (currval('users_id_seq'), 'dark');
COMMIT;
BEGIN
INSERT 0 1
INSERT 0 1
INSERT 0 1
COMMIT
postgres=# \q
sonya@sonya-laptop:~$ 
