sonya@sonya-laptop:~$ psql -U postgres -d postgres -p 5432
psql (14.19 (Ubuntu 14.19-0ubuntu0.22.04.1))
Type "help" for help.

postgres=# CREATE TABLE departments (
        dept_id SERIAL PRIMARY KEY,
        dept_name VARCHAR(100) NOT NULL,
        location VARCHAR(100)
);
CREATE TABLE
postgres=# CREATE TABLE employees(
        emp_id SERIAL PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        dept_id INTEGER REFERENCES departments(dept_id)
);
CREATE TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
        emp_id SERIAL PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        dept_id INTEGER,
        FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
);
CREATE TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
        emp_id SERIAL PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        dept_id INTEGER,
        FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
);
CREATE TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
        emp_id SERIAL PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        dept_id INTEGER
);
CREATE TABLE
postgres=# ALTER TABLE employees
ADD CONSTRAINT fk_employee_department
FOREIGN KEY (dept_id) REFERENCES departments(dept_id);
ALTER TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
        emp_id SERIAL PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        dept_id INTEGER,
        CONSTRAINT fk_employee_department
                FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
);
CREATE TABLE
postgres=# INSERT INTO departments (dept_name, location) VALUES
        ('Engineering', 'Building A'),
        ('Marketing', 'Building B'),
        ('HR', 'Building C');
INSERT 0 3
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
        ('John', 'Smith', '1');
INSERT 0 1
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
        ('Jane', 'Doe', '99');
ERROR:  insert or update on table "employees" violates foreign key constraint "fk_employee_department"
DETAIL:  Key (dept_id)=(99) is not present in table "departments".
postgres=# DELETE FROM departments WHERE dept_id = 1;
ERROR:  update or delete on table "departments" violates foreign key constraint "fk_employee_department" on table "employees"
DETAIL:  Key (dept_id)=(1) is still referenced from table "employees".
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
        emp_id SERIAL PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        dept_id INTEGER REFERENCES departments(dept_id) ON DELETE CASCADE
);
CREATE TABLE
postgres=# DELETE FROM DEPARTMENTS WHERE dept_id = 1;
DELETE 1
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
        emp_id SERIAL PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        dept_id INTEGER REFERENCES departments(dept_id) ON DELETE SET NULL
);
CREATE TABLE
postgres=# DELETE FROM departments WHERE dept_id = 1;
DELETE 0
postgres=# INSERT INTO departments (dept_name, location) VALUES
        ('Engineering', 'Building A'),
        ('Marketing', 'Building B'),
        ('HR', 'Building C');
INSERT 0 3
postgres=# DELETE FROM departments WHERE dept_id = 1;
DELETE 0
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
        dept_id INTEGER REFERENCES departments(dept_id) ON DELETE SET DEFAULT
);
CREATE TABLE
postgres=# DELETE FROM departments WHERE dept_id = 1;
DELETE 0
postgres=# SELECT * from departments;
 dept_id |  dept_name  |  location  
---------+-------------+------------
       2 | Marketing   | Building B
       3 | HR          | Building C
       4 | Engineering | Building A
       5 | Marketing   | Building B
       6 | HR          | Building C
(5 rows)

postgres=# DELETE FROM departments WHERE dept_id = 2;
DELETE 1
postgres=# SELECT * from departments;
 dept_id |  dept_name  |  location  
---------+-------------+------------
       3 | HR          | Building C
       4 | Engineering | Building A
       5 | Marketing   | Building B
       6 | HR          | Building C
(4 rows)

postgres=# SELECT * FROM employees;
 emp_id | first_name | last_name | dept_id 
--------+------------+-----------+---------
(0 rows)

postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
        ('John', 'Smith', '1');
ERROR:  insert or update on table "employees" violates foreign key constraint "employees_dept_id_fkey"
DETAIL:  Key (dept_id)=(1) is not present in table "departments".
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
        ('John', 'Smith', '3');
INSERT 0 1
postgres=# DELETE FROM departments WHERE dept_id = 3;
DELETE 1
postgres=# SELECT * FROM employees;
 emp_id | first_name | last_name | dept_id 
--------+------------+-----------+---------
      2 | John       | Smith     |        
(1 row)

postgres=# SELECT * from departments;
 dept_id |  dept_name  |  location  
---------+-------------+------------
       4 | Engineering | Building A
       5 | Marketing   | Building B
       6 | HR          | Building C
(3 rows)

postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
        dept_id INTEGER REFERENCES departments(dept_id) ON DELETE RESTRICT
);
CREATE TABLE
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
        ('John', 'Smith', '4');
INSERT 0 1
postgres=# DELETE FROM departments WHERE dept_id = 4;
ERROR:  update or delete on table "departments" violates foreign key constraint "employees_dept_id_fkey" on table "employees"
DETAIL:  Key (dept_id)=(4) is still referenced from table "employees".
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
        dept_id INTEGER REFERENCES departments(dept_id) ON UPDATE CASCADE
);
CREATE TABLE
postgres=# SELECT * from departments;
 dept_id |  dept_name  |  location  
---------+-------------+------------
       4 | Engineering | Building A
       5 | Marketing   | Building B
       6 | HR          | Building C
(3 rows)

postgres=# UPDATE departments SET dept_id = 100 WHERE dept_id = 4;
UPDATE 1
postgres=# SELECT * from departments;
 dept_id |  dept_name  |  location  
---------+-------------+------------
       5 | Marketing   | Building B
       6 | HR          | Building C
     100 | Engineering | Building A
(3 rows)

postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
        dept_id INTEGER REFERENCES departments(dept_id) 
                ON DELETE CASCADE
                ON UPDATE CASCADE
);
CREATE TABLE
postgres=# SELECT * from departments;
 dept_id |  dept_name  |  location  
---------+-------------+------------
       5 | Marketing   | Building B
       6 | HR          | Building C
     100 | Engineering | Building A
(3 rows)

postgres=# UPDATE departments SET dept_id = 30 WHERE dept_id = 5;
UPDATE 1
postgres=# DELETE FROM departments WHERE dept_id = 30;
DELETE 1
postgres=# SELECT * from departments;
 dept_id |  dept_name  |  location  
---------+-------------+------------
       6 | HR          | Building C
     100 | Engineering | Building A
(2 rows)

postgres=# \dt
            List of relations
 Schema |    Name     | Type  |  Owner   
--------+-------------+-------+----------
 public | departments | table | postgres
 public | employees   | table | postgres
(2 rows)

postgres=# DROP TABLE departments;
ERROR:  cannot drop table departments because other objects depend on it
DETAIL:  constraint employees_dept_id_fkey on table employees depends on table departments
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# DROP TABLE departments;
DROP TABLE
postgres=# CREATE TABLE users(
        user_id SERIAL PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE user_profiles(
        profile_id SERIAL PRIMARY KEY,
        user_id INTEGER UNIQUE NOT NULL,
        first_name VARCHAR(50),
        last_name VARCHAR(50),
        bio TEXT,
        profile_picture_url VARCHAR(255),
        FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);
CREATE TABLE
CREATE TABLE
postgres=# INSERT INTO users (username, email) VALUES
        ('kkp', 'example@gmail.com');
INSERT 0 1
postgres=# INSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES
        ('1', 'Sonya', 'Kan', 'example');
INSERT 0 1
postgres=# INSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES
        ('1', 'Sonya-wrong', 'Kan', 'example');
ERROR:  duplicate key value violates unique constraint "user_profiles_user_id_key"
DETAIL:  Key (user_id)=(1) already exists.
postgres=# DROP TABLE user_profiles;
DROP TABLE
postgres=# CREATE TABLE user_profiles(
        user_id INTEGER PRIMARY KEY,
        first_name VARCHAR(50),
        last_name VARCHAR(50),
        bio TEXT,
        profile_picture_url VARCHAR(255),
        FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);
CREATE TABLE
postgres=# SELECT * FROM users;
 user_id | username |       email       |         created_at         
---------+----------+-------------------+----------------------------
       1 | kkp      | example@gmail.com | 2025-09-16 11:44:14.232015
(1 row)

postgres=# INSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES
        ('1', 'Sonya', 'Kan', 'example');
INSERT 0 1
postgres=# INSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES
        ('1', 'Sonya-wrong', 'Kan', 'example');
ERROR:  duplicate key value violates unique constraint "user_profiles_pkey"
DETAIL:  Key (user_id)=(1) already exists.
postgres=# \dt
             List of relations
 Schema |     Name      | Type  |  Owner   
--------+---------------+-------+----------
 public | user_profiles | table | postgres
 public | users         | table | postgres
(2 rows)

postgres=# DROP TABLE user_profiles;
DROP TABLE
postgres=# DROP TABLE users;
DROP TABLE
postgres=# CREATE TABLE departments (
        dept_id SERIAL PRIMARY KEY,
        dept_name VARCHAR(100) NOT NULL,
        manager_name VARCHAR(100),
        budget DECIMAL(10, 2)
);

CREATE TABLE employees (
        emp_id SERIAL PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        position VARCHAR(100),
        salary DECIMAL(10,2),
        hire_date DATE DEFAULT CURRENT_DATE,
        dept_id INTEGER NOT NULL,
        FOREIGN KEY (dept_id) REFERENCES departments (dept_id) ON DELETE RESTRICT
);
CREATE TABLE
CREATE TABLE
postgres=# INSERT INTO departments (dept_name, manager_name, budget) VALUES
        ('Engineering', 'Alice Johnson', 50000.00),
        ('Marketing', 'Bob Wilson', 20000.00);

INSERT INTP  employees (first_name, last_name, position, salary, dept_id) VALUES
        ('John', 'Smith', 'Software Engineer', 7500.00, 1),
        ('Jane', 'Doe', 'Senior Developer', 85000.00, 1),
        ('Mike', 'Brown', 'DevOps Engineer', 80000.00, 1),
        ('Sarah', 'Davis', 'Marketing Specialist', 55000.00, 2);

SELECT d.dept_name, e.first_name, e.last_name, e.position
FROM departments d
JOIN employees e ON d.dept_id = e.dept_id
ORDER BY d.dept_name, e.last_name;
INSERT 0 2
ERROR:  syntax error at or near "INTP"
LINE 1: INSERT INTP  employees (first_name, last_name, position, sal...
               ^
 dept_name | first_name | last_name | position 
-----------+------------+-----------+----------
(0 rows)

postgres=# INSERT INTO departments (dept_name, manager_name, budget) VALUES
        ('Engineering', 'Alice Johnson', 50000.00),
        ('Marketing', 'Bob Wilson', 20000.00);

INSERT INTO  employees (first_name, last_name, position, salary, dept_id) VALUES
        ('John', 'Smith', 'Software Engineer', 7500.00, 1),
        ('Jane', 'Doe', 'Senior Developer', 85000.00, 1),
        ('Mike', 'Brown', 'DevOps Engineer', 80000.00, 1),
        ('Sarah', 'Davis', 'Marketing Specialist', 55000.00, 2);

SELECT d.dept_name, e.first_name, e.last_name, e.position
FROM departments d
JOIN employees e ON d.dept_id = e.dept_id
ORDER BY d.dept_name, e.last_name;
INSERT 0 2
INSERT 0 4
  dept_name  | first_name | last_name |       position       
-------------+------------+-----------+----------------------
 Engineering | Mike       | Brown     | DevOps Engineer
 Engineering | Jane       | Doe       | Senior Developer
 Engineering | John       | Smith     | Software Engineer
 Marketing   | Sarah      | Davis     | Marketing Specialist
(4 rows)
postgres=# \dt
            List of relations
 Schema |    Name     | Type  |  Owner   
--------+-------------+-------+----------
 public | departments | table | postgres
 public | employees   | table | postgres
(2 rows)

postgres=# DROP TABLE employees;
DROP TABLE
postgres=# DROP TABLE departments;
DROP TABLE
postgres=# CREATE TABLE students(
        student_id SERIAL PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        email VARCHAR(100) UNIQUE,
        enrollment_date DATE DEFAULT CURRENT_DATE
);

CREATE TABLE courses (
        course_id SERIAL PRIMARY KEY,
        course_code VARCHAR(10) UNIQUE NOT NULL,
        course_name VARCHAR(100) NOT NULL,
        credits INTEGER NOT NULL,
        instructor VARCHAR(100)
);

CREATE TABLE student_enrollments (
        enrollment_id SERIAL PRIMARY KEY,
        student_id INTEGER NOT NULL,
        course_id INTEGER NOT NULL,
        enrollment_date DATE DEFAULT CURRENT_DATE,
        grade CHAR(2),

        FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
        FOREIGN KEY (course_id) REFERENCES courses(course_id) ON DELETE CASCADE,

        UNIQUE(student_id, course_id)
);
CREATE TABLE
CREATE TABLE
CREATE TABLE
postgres=# INSERT INTO students (first_name, last_name, email) VALUES
        ('Alice', 'Johnson', 'alice@university.edu'),
        ('Bob', 'Smith', 'bob@university.edu'),
        ('Carol', 'Wilson', 'carol@university.edu');

INSERT INTO courses (course_code, course_name, credits, instructor) VALUES
        ('CS101', 'Introduction to Programming', '3', 'Dr. Brown'),
        ('CS201', 'Data Structures', 4, 'Dr. Davis'),
        ('MATH101', 'Calculus I', 4, 'Dr. Wilson');

INSERT INTO student_enrollments (student_id, course_id, grade) VALUES
        (1, 1, 'A'), 
        (1, 2, 'B+'),
        (2, 1, 'A-'),
        (2, 3, 'B'),
        (3, 2, 'A'), 
        (3, 3, 'A-');
INSERT 0 3
INSERT 0 3
INSERT 0 6
postgres=# SELECT 
        s.first_name || '' || s.last_name AS student_name,
        c.course_code,
        c.course_name,
        se.grade,
        se.enrollment_date
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN courses c ON se.course_id = c.course_id
ORDER BY s.last_name, c.course_code;
 student_name | course_code |         course_name         | grade | enrollment_date 
--------------+-------------+-----------------------------+-------+-----------------
 AliceJohnson | CS101       | Introduction to Programming | A     | 2025-09-17
 AliceJohnson | CS201       | Data Structures             | B+    | 2025-09-17
 BobSmith     | CS101       | Introduction to Programming | A-    | 2025-09-17
 BobSmith     | MATH101     | Calculus I                  | B     | 2025-09-17
 CarolWilson  | CS201       | Data Structures             | A     | 2025-09-17
 CarolWilson  | MATH101     | Calculus I                  | A-    | 2025-09-17
(6 rows)

postgres=# SELECT s.first_name, s.last_name, se.grade
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN courses c ON se.course_id = c.course_id
WHERE c.course_code = 'CS101';
 first_name | last_name | grade 
------------+-----------+-------
 Alice      | Johnson   | A 
 Bob        | Smith     | A-
(2 rows)

postgres=# SELECT c.course_code, c.course_name, c.credits, se.grade
FROM courses c
JOIN student_enrollments se ON c.course_id = se.course_id
JOIN students s ON se.student_id = s.student_id
WHERE s.email = 'alice@university.edu';
 course_code |         course_name         | credits | grade 
-------------+-----------------------------+---------+-------
 CS101       | Introduction to Programming |       3 | A 
 CS201       | Data Structures             |       4 | B+
(2 rows)
postgres=# DROP TABLE student_enrollments;
DROP TABLE
postgres=# DROP TABLE courses;
DROP TABLE
postgres=# DROP TABLE students;
DROP TABLE
postgres=# \q
sonya@sonya-laptop:~$
